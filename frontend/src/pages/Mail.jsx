import React, { useState, useEffect } from 'react'
import workspaceInvitationService from '../services/workspaceInvitationService'
import '../styles/Mail.css'

const Mail = () => {
  const [selectedMail, setSelectedMail] = useState(null)
  const [selectedCategory, setSelectedCategory] = useState('inbox')
  const [searchKeyword, setSearchKeyword] = useState('')
  const [showCompose, setShowCompose] = useState(false)
  
  // Workspace invitations state
  const [workspaceInvitations, setWorkspaceInvitations] = useState([])
  const [loadingInvitations, setLoadingInvitations] = useState(false)
  const [invitationError, setInvitationError] = useState('')

  // Dynamic mail categories with real counts
  const getMailCategories = () => {
    // Ch·ªâ ƒë·∫øm nh·ªØng invitation c√≥ status PENDING
    const pendingInvitationCount = workspaceInvitations.filter(invitation => 
      invitation.status === 'PENDING'
    ).length;
    
    return [
      { id: 'inbox', name: 'H·ªôp th∆∞ ƒë·∫øn', icon: 'bi-inbox', count: 15 },
      { id: 'starred', name: 'ƒê√£ ƒë√°nh d·∫•u sao', icon: 'bi-star', count: 3 },
      { id: 'sent', name: 'ƒê√£ g·ª≠i', icon: 'bi-send', count: 8 },
      { id: 'invitations', name: 'L·ªùi m·ªùi workspace', icon: 'bi-people-fill', count: pendingInvitationCount }
    ]
  }

  const mockMails = [
    {
      id: 1,
      sender: 'Nguy·ªÖn VƒÉn A',
      email: 'nguyenvana@example.com',
      subject: 'B√°o c√°o t√¨nh h√¨nh d·ª± √°n Q4/2024',
      preview: 'Xin ch√†o, t√¥i g·ª≠i b√°o c√°o t√¨nh h√¨nh th·ª±c hi·ªán d·ª± √°n trong qu√Ω 4 nƒÉm 2024. D·ª± √°n ƒë√£ ho√†n th√†nh 85% c√°c milestone ƒë·ªÅ ra...',
      content: `
        <p>Xin ch√†o anh/ch·ªã,</p>
        <p>T√¥i g·ª≠i b√°o c√°o t√¨nh h√¨nh th·ª±c hi·ªán d·ª± √°n trong qu√Ω 4 nƒÉm 2024. D·ª± √°n ƒë√£ ho√†n th√†nh 85% c√°c milestone ƒë·ªÅ ra v·ªõi nh·ªØng k·∫øt qu·∫£ ƒë√°ng ghi nh·∫≠n:</p>
        <ul>
          <li>Ho√†n th√†nh module ƒëƒÉng nh·∫≠p v√† x√°c th·ª±c ng∆∞·ªùi d√πng</li>
          <li>Tri·ªÉn khai h·ªá th·ªëng qu·∫£n l√Ω task v√† note</li>
          <li>T√≠ch h·ª£p API Google OAuth</li>
          <li>Thi·∫øt k·∫ø giao di·ªán responsive</li>
        </ul>
        <p>M·ªôt s·ªë kh√≥ khƒÉn g·∫∑p ph·∫£i:</p>
        <ul>
          <li>V·∫•n ƒë·ªÅ t√≠ch h·ª£p v·ªõi h·ªá th·ªëng legacy</li>
          <li>Thi·∫øu ngu·ªìn nh√¢n l·ª±c trong giai ƒëo·∫°n cu·ªëi</li>
        </ul>
        <p>K·∫ø ho·∫°ch cho Q1/2025:</p>
        <ul>
          <li>Ho√†n thi·ªán c√°c t√≠nh nƒÉng c√≤n l·∫°i</li>
          <li>Th·ª±c hi·ªán testing to√†n di·ªán</li>
          <li>Chu·∫©n b·ªã cho vi·ªác deploy production</li>
        </ul>
        <p>Tr√¢n tr·ªçng,<br>Nguy·ªÖn VƒÉn A</p>
      `,
      time: '2 gi·ªù tr∆∞·ªõc',
      isRead: false,
      isStarred: true,
      hasAttachment: true,
      priority: 'high',
      category: 'inbox'
    },
    {
      id: 2,
      sender: 'HR Department',
      email: 'hr@company.com',
      subject: 'Th√¥ng b√°o ngh·ªâ l·ªÖ T·∫øt Nguy√™n ƒê√°n 2025',
      preview: 'K√≠nh g·ª≠i to√†n th·ªÉ CBNV, C√¥ng ty th√¥ng b√°o l·ªãch ngh·ªâ T·∫øt Nguy√™n ƒê√°n 2025 nh∆∞ sau...',
      content: `
        <p>K√≠nh g·ª≠i to√†n th·ªÉ CBNV,</p>
        <p>C√¥ng ty th√¥ng b√°o l·ªãch ngh·ªâ T·∫øt Nguy√™n ƒê√°n 2025 nh∆∞ sau:</p>
        <ul>
          <li><strong>Ng√†y b·∫Øt ƒë·∫ßu ngh·ªâ:</strong> 27/01/2025 (28 th√°ng Ch·∫°p)</li>
          <li><strong>Ng√†y ƒëi l√†m tr·ªü l·∫°i:</strong> 03/02/2025 (m√πng 6 T·∫øt)</li>
          <li><strong>T·ªïng s·ªë ng√†y ngh·ªâ:</strong> 8 ng√†y</li>
        </ul>
        <p>C√°c ph√≤ng ban vui l√≤ng:</p>
        <ul>
          <li>Ho√†n th√†nh c√¥ng vi·ªác tr∆∞·ªõc ng√†y 25/01/2025</li>
          <li>B√†n giao c√¥ng vi·ªác cho ng∆∞·ªùi thay th·∫ø (n·∫øu c√≥)</li>
          <li>T·∫Øt t·∫•t c·∫£ thi·∫øt b·ªã ƒëi·ªán tr∆∞·ªõc khi v·ªÅ</li>
        </ul>
        <p>Ch√∫c to√†n th·ªÉ CBNV nƒÉm m·ªõi an khang th·ªãnh v∆∞·ª£ng!</p>
        <p>Ban Gi√°m ƒë·ªëc</p>
      `,
      time: '5 gi·ªù tr∆∞·ªõc',
      isRead: true,
      isStarred: false,
      hasAttachment: false,
      priority: 'normal',
      category: 'inbox'
    },
    {
      id: 3,
      sender: 'Tr·∫ßn Th·ªã B',
      email: 'tranthib@example.com',
      subject: 'Meeting notes - H·ªçp team development',
      preview: 'G·ª≠i anh ch·ªã, ƒë√¢y l√† note c·ªßa bu·ªïi h·ªçp team development h√¥m nay...',
      content: `
        <p>G·ª≠i anh ch·ªã,</p>
        <p>ƒê√¢y l√† note c·ªßa bu·ªïi h·ªçp team development h√¥m nay:</p>
        <h4>Agenda:</h4>
        <ol>
          <li>Review sprint hi·ªán t·∫°i</li>
          <li>Th·∫£o lu·∫≠n v·ªÅ c√°c feature m·ªõi</li>
          <li>Planning cho sprint ti·∫øp theo</li>
          <li>Gi·∫£i quy·∫øt c√°c blockers</li>
        </ol>
        <h4>K·∫øt qu·∫£ th·∫£o lu·∫≠n:</h4>
        <ul>
          <li>Sprint hi·ªán t·∫°i ho√†n th√†nh 90% tasks</li>
          <li>C·∫ßn th√™m 2 ng√†y ƒë·ªÉ ho√†n thi·ªán feature X</li>
          <li>Ph√¢n c√¥ng tasks cho sprint m·ªõi</li>
        </ul>
        <h4>Action items:</h4>
        <ul>
          <li>Anh A: Ho√†n th√†nh module authentication - Deadline: 16/07</li>
          <li>Ch·ªã B: Review code v√† vi·∫øt test cases - Deadline: 17/07</li>
          <li>Anh C: Update documentation - Deadline: 18/07</li>
        </ul>
        <p>Thanks,<br>Tr·∫ßn Th·ªã B</p>
      `,
      time: '1 ng√†y tr∆∞·ªõc',
      isRead: true,
      isStarred: true,
      hasAttachment: true,
      priority: 'normal',
      category: 'inbox'
    },
    {
      id: 4,
      sender: 'System Admin',
      email: 'admin@workify.com',
      subject: 'B·∫£o tr√¨ h·ªá th·ªëng ƒë·ªãnh k·ª≥',
      preview: 'Th√¥ng b√°o b·∫£o tr√¨ h·ªá th·ªëng v√†o cu·ªëi tu·∫ßn n√†y t·ª´ 22:00 ƒë·∫øn 02:00...',
      content: `
        <p>K√≠nh g·ª≠i ng∆∞·ªùi d√πng Workify,</p>
        <p>Ch√∫ng t√¥i s·∫Ω th·ª±c hi·ªán b·∫£o tr√¨ h·ªá th·ªëng ƒë·ªãnh k·ª≥ v√†o:</p>
        <ul>
          <li><strong>Th·ªùi gian:</strong> Th·ª© 7, 20/07/2025 t·ª´ 22:00 ƒë·∫øn 02:00 (CN)</li>
          <li><strong>·∫¢nh h∆∞·ªüng:</strong> T·∫•t c·∫£ d·ªãch v·ª• s·∫Ω t·∫°m ng·ª´ng ho·∫°t ƒë·ªông</li>
          <li><strong>M·ª•c ƒë√≠ch:</strong> N√¢ng c·∫•p server v√† c·∫£i thi·ªán performance</li>
        </ul>
        <p>Nh·ªØng c·∫£i ti·∫øn sau b·∫£o tr√¨:</p>
        <ul>
          <li>TƒÉng t·ªëc ƒë·ªô t·∫£i trang 30%</li>
          <li>B·ªï sung t√≠nh nƒÉng backup t·ª± ƒë·ªông</li>
          <li>C·∫£i thi·ªán security</li>
          <li>S·ª≠a c√°c bugs ƒë√£ b√°o c√°o</li>
        </ul>
        <p>Ch√∫ng t√¥i xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y.</p>
        <p>Team Workify</p>
      `,
      time: '2 ng√†y tr∆∞·ªõc',
      isRead: false,
      isStarred: false,
      hasAttachment: false,
      priority: 'low',
      category: 'inbox'
    },
    {
      id: 5,
      sender: 'Marketing Team',
      email: 'marketing@company.com',
      subject: 'Newsletter th√°ng 7 - Nh·ªØng t√≠nh nƒÉng m·ªõi c·ªßa Workify',
      preview: 'Ch√†o b·∫°n! Th√°ng 7 n√†y ch√∫ng t√¥i ƒë√£ ra m·∫Øt nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã...',
      content: `
        <p>Ch√†o b·∫°n!</p>
        <p>Th√°ng 7 n√†y ch√∫ng t√¥i ƒë√£ ra m·∫Øt nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã trong Workify:</p>
        <h4>üöÄ T√≠nh nƒÉng m·ªõi:</h4>
        <ul>
          <li><strong>Rich Text Editor:</strong> So·∫°n th·∫£o note v·ªõi ƒë·ªãnh d·∫°ng ƒëa d·∫°ng</li>
          <li><strong>File Management:</strong> Upload v√† qu·∫£n l√Ω file ƒë√≠nh k√®m</li>
          <li><strong>Export Note:</strong> Xu·∫•t note ra PDF/DOCX</li>
          <li><strong>Version History:</strong> Theo d√µi l·ªãch s·ª≠ ch·ªânh s·ª≠a</li>
        </ul>
        <h4>üìä Th·ªëng k√™ s·ª≠ d·ª•ng:</h4>
        <ul>
          <li>1,250+ ng∆∞·ªùi d√πng m·ªõi tham gia</li>
          <li>15,000+ notes ƒë∆∞·ª£c t·∫°o</li>
          <li>98% ng∆∞·ªùi d√πng h√†i l√≤ng</li>
        </ul>
        <h4>üéÅ ∆Øu ƒë√£i ƒë·∫∑c bi·ªát:</h4>
        <p>N√¢ng c·∫•p l√™n Premium v·ªõi gi√° ∆∞u ƒë√£i 50% trong th√°ng n√†y!</p>
        <p>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Workify!</p>
      `,
      time: '3 ng√†y tr∆∞·ªõc',
      isRead: true,
      isStarred: false,
      hasAttachment: false,
      priority: 'low',
      category: 'inbox'
    },
    // Workspace Invitations
    {
      id: 5,
      sender: 'Tr·∫ßn Minh Ho√†ng',
      email: 'hoang.tran@company.com',
      subject: 'L·ªùi m·ªùi tham gia workspace "D·ª± √°n Website B√°n h√†ng"',
      preview: 'B·∫°n ƒë∆∞·ª£c m·ªùi tham gia workspace "D·ª± √°n Website B√°n h√†ng" v·ªõi vai tr√≤ Developer...',
      content: `
        <div class="invitation-card">
          <h4>üéâ L·ªùi m·ªùi tham gia workspace</h4>
          <div class="workspace-info">
            <h5><i class="bi bi-briefcase me-2"></i>D·ª± √°n Website B√°n h√†ng</h5>
            <p><strong>Ng∆∞·ªùi m·ªùi:</strong> Tr·∫ßn Minh Ho√†ng (Project Manager)</p>
            <p><strong>Vai tr√≤:</strong> Developer</p>
            <p><strong>M√¥ t·∫£:</strong> Ph√°t tri·ªÉn website th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ cho c√¥ng ty XYZ</p>
          </div>
          <div class="workspace-details">
            <h6>Th√¥ng tin workspace:</h6>
            <ul>
              <li><strong>Th√†nh vi√™n hi·ªán t·∫°i:</strong> 8 ng∆∞·ªùi</li>
              <li><strong>D·ª± √°n ƒëang th·ª±c hi·ªán:</strong> 3 d·ª± √°n</li>
              <li><strong>Th·ªùi gian d·ª± ki·∫øn:</strong> 6 th√°ng</li>
              <li><strong>C√¥ng ngh·ªá:</strong> React, Node.js, MongoDB</li>
            </ul>
          </div>
          <div class="invitation-actions mt-3">
            <button class="btn btn-success me-2">‚úÖ Ch·∫•p nh·∫≠n</button>
            <button class="btn btn-outline-danger">‚ùå T·ª´ ch·ªëi</button>
          </div>
        </div>
      `,
      time: '1 gi·ªù tr∆∞·ªõc',
      isRead: false,
      isStarred: false,
      hasAttachment: false,
      priority: 'high',
      category: 'invitations',
      invitationType: 'workspace'
    },
    {
      id: 6,
      sender: 'Nguy·ªÖn Th·ªã Lan',
      email: 'lan.nguyen@startup.com',
      subject: 'M·ªùi b·∫°n gia nh·∫≠p workspace "Marketing Team"',
      preview: 'Ch√∫ng t√¥i mu·ªën m·ªùi b·∫°n tham gia v√†o workspace Marketing Team v·ªõi vai tr√≤ Content Creator...',
      content: `
        <div class="invitation-card">
          <h4>üöÄ L·ªùi m·ªùi tham gia workspace</h4>
          <div class="workspace-info">
            <h5><i class="bi bi-megaphone me-2"></i>Marketing Team</h5>
            <p><strong>Ng∆∞·ªùi m·ªùi:</strong> Nguy·ªÖn Th·ªã Lan (Marketing Manager)</p>
            <p><strong>Vai tr√≤:</strong> Content Creator</p>
            <p><strong>M√¥ t·∫£:</strong> T·∫°o n·ªôi dung marketing cho c√°c s·∫£n ph·∫©m c√¥ng ty</p>
          </div>
          <div class="workspace-details">
            <h6>Th√¥ng tin workspace:</h6>
            <ul>
              <li><strong>Th√†nh vi√™n hi·ªán t·∫°i:</strong> 12 ng∆∞·ªùi</li>
              <li><strong>Chi·∫øn d·ªãch ƒëang ch·∫°y:</strong> 5 chi·∫øn d·ªãch</li>
              <li><strong>K·ªπ nƒÉng c·∫ßn thi·∫øt:</strong> Copywriting, Design, SEO</li>
              <li><strong>M·ª©c ƒë·ªô:</strong> Mid-level</li>
            </ul>
          </div>
          <div class="invitation-actions mt-3">
            <button class="btn btn-success me-2">‚úÖ Ch·∫•p nh·∫≠n</button>
            <button class="btn btn-outline-danger">‚ùå T·ª´ ch·ªëi</button>
          </div>
        </div>
      `,
      time: '3 gi·ªù tr∆∞·ªõc',
      isRead: false,
      isStarred: true,
      hasAttachment: false,
      priority: 'normal',
      category: 'invitations',
      invitationType: 'workspace'
    },
    {
      id: 7,
      sender: 'L√™ VƒÉn ƒê·ª©c',
      email: 'duc.le@techcorp.vn',
      subject: 'L·ªùi m·ªùi: Workspace "AI Research Lab"',
      preview: 'Tham gia nghi√™n c·ª©u AI v√† Machine Learning c√πng ƒë·ªôi ng≈© chuy√™n gia...',
      content: `
        <div class="invitation-card">
          <h4>üß† L·ªùi m·ªùi tham gia workspace</h4>
          <div class="workspace-info">
            <h5><i class="bi bi-cpu me-2"></i>AI Research Lab</h5>
            <p><strong>Ng∆∞·ªùi m·ªùi:</strong> L√™ VƒÉn ƒê·ª©c (Research Lead)</p>
            <p><strong>Vai tr√≤:</strong> AI Research Engineer</p>
            <p><strong>M√¥ t·∫£:</strong> Nghi√™n c·ª©u v√† ph√°t tri·ªÉn c√°c m√¥ h√¨nh AI ti√™n ti·∫øn</p>
          </div>
          <div class="workspace-details">
            <h6>Th√¥ng tin workspace:</h6>
            <ul>
              <li><strong>Th√†nh vi√™n hi·ªán t·∫°i:</strong> 6 nh√† nghi√™n c·ª©u</li>
              <li><strong>D·ª± √°n nghi√™n c·ª©u:</strong> 4 d·ª± √°n</li>
              <li><strong>C√¥ng ngh·ªá:</strong> TensorFlow, PyTorch, Python</li>
              <li><strong>Y√™u c·∫ßu:</strong> PhD ho·∫∑c kinh nghi·ªám 3+ nƒÉm</li>
            </ul>
          </div>
          <div class="invitation-actions mt-3">
            <button class="btn btn-success me-2">‚úÖ Ch·∫•p nh·∫≠n</button>
            <button class="btn btn-outline-danger">‚ùå T·ª´ ch·ªëi</button>
          </div>
        </div>
      `,
      time: '1 ng√†y tr∆∞·ªõc',
      isRead: true,
      isStarred: false,
      hasAttachment: true,
      priority: 'high',
      category: 'invitations',
      invitationType: 'workspace'
    },
    {
      id: 8,
      sender: 'Ph·∫°m Th·ªã Mai',
      email: 'mai.pham@design.studio',
      subject: 'M·ªùi tham gia "Creative Design Hub"',
      preview: 'Workspace d√†nh cho c√°c designer s√°ng t·∫°o, l√†m vi·ªác v·ªõi c√°c d·ª± √°n UI/UX h·∫•p d·∫´n...',
      content: `
        <div class="invitation-card">
          <h4>üé® L·ªùi m·ªùi tham gia workspace</h4>
          <div class="workspace-info">
            <h5><i class="bi bi-palette me-2"></i>Creative Design Hub</h5>
            <p><strong>Ng∆∞·ªùi m·ªùi:</strong> Ph·∫°m Th·ªã Mai (Design Director)</p>
            <p><strong>Vai tr√≤:</strong> UI/UX Designer</p>
            <p><strong>M√¥ t·∫£:</strong> Thi·∫øt k·∫ø giao di·ªán v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng cho c√°c ·ª©ng d·ª•ng</p>
          </div>
          <div class="workspace-details">
            <h6>Th√¥ng tin workspace:</h6>
            <ul>
              <li><strong>Th√†nh vi√™n hi·ªán t·∫°i:</strong> 15 designer</li>
              <li><strong>D·ª± √°n thi·∫øt k·∫ø:</strong> 8 d·ª± √°n</li>
              <li><strong>C√¥ng c·ª•:</strong> Figma, Adobe XD, Sketch</li>
              <li><strong>Lo·∫°i d·ª± √°n:</strong> Mobile App, Web App, Branding</li>
            </ul>
          </div>
          <div class="invitation-actions mt-3">
            <button class="btn btn-success me-2">‚úÖ Ch·∫•p nh·∫≠n</button>
            <button class="btn btn-outline-danger">‚ùå T·ª´ ch·ªëi</button>
          </div>
        </div>
      `,
      time: '2 ng√†y tr∆∞·ªõc',
      isRead: false,
      isStarred: false,
      hasAttachment: false,
      priority: 'normal',
      category: 'invitations',
      invitationType: 'workspace'
    }
  ]

  const [composeData, setComposeData] = useState({
    to: '',
    subject: '',
    content: ''
  })

  // Load workspace invitations on component mount
  useEffect(() => {
    if (selectedCategory === 'invitations') {
      loadWorkspaceInvitations()
    }
  }, [selectedCategory])

  // Also load on initial mount
  useEffect(() => {
    loadWorkspaceInvitations()
  }, [])

  const loadWorkspaceInvitations = async () => {
    try {
      setLoadingInvitations(true)
      setInvitationError('')
      
      console.log('ƒêang t·∫£i workspace invitations t·ª´ API...')
      
      // Enable API call ƒë·ªÉ t·∫£i invitations th·∫≠t
      const response = await workspaceInvitationService.getPendingInvitations()
      console.log('Response t·ª´ API:', response)
      
      // X·ª≠ l√Ω response data
      let invitations = []
      if (response && response.data) {
        invitations = Array.isArray(response.data) ? response.data : []
      } else if (Array.isArray(response)) {
        invitations = response
      }
      
      console.log('Parsed invitations:', invitations)
      setWorkspaceInvitations(invitations)
      
    } catch (error) {
      console.error('Error loading workspace invitations:', error)
      setInvitationError(`Kh√¥ng th·ªÉ t·∫£i l·ªùi m·ªùi workspace: ${error.message}`)
      // Fallback to empty array so UI doesn't break
      setWorkspaceInvitations([])
    } finally {
      setLoadingInvitations(false)
    }
  }

  const handleAcceptInvitation = async (invitationId) => {
    try {
      await workspaceInvitationService.acceptInvitation(invitationId)
      // Reload invitations after accepting
      await loadWorkspaceInvitations()
      // Clear selected mail to refresh view
      setSelectedMail(null)
      // Show success message
      alert('ƒê√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi workspace th√†nh c√¥ng!')
    } catch (error) {
      console.error('Error accepting invitation:', error)
      alert('Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n l·ªùi m·ªùi. Vui l√≤ng th·ª≠ l·∫°i sau.')
    }
  }

  const handleDeclineInvitation = async (invitationId) => {
    try {
      await workspaceInvitationService.declineInvitation(invitationId)
      // Reload invitations after declining
      await loadWorkspaceInvitations()
      // Clear selected mail to refresh view
      setSelectedMail(null)
      // Show success message
      alert('ƒê√£ t·ª´ ch·ªëi l·ªùi m·ªùi workspace.')
    } catch (error) {
      console.error('Error declining invitation:', error)
      alert('Kh√¥ng th·ªÉ t·ª´ ch·ªëi l·ªùi m·ªùi. Vui l√≤ng th·ª≠ l·∫°i sau.')
    }
  }

  // Combine regular emails with workspace invitations
  const getAllMails = () => {
    if (selectedCategory === 'invitations') {
      // Ch·ªâ hi·ªÉn th·ªã workspace invitations t·ª´ API, kh√¥ng fallback v·ªÅ mockdata
      if (workspaceInvitations && workspaceInvitations.length > 0) {
        // Convert workspace invitations to mail format
        const invitationMails = workspaceInvitations.map((invitation, index) => {
          // Provide fallback values for missing data
          const safeInvitation = {
            id: invitation?.id || `temp_${index}`,
            workspaceName: invitation?.workspaceName || 'Unknown Workspace',
            workspaceDescription: invitation?.workspaceDescription || 'Kh√¥ng c√≥ m√¥ t·∫£',
            role: invitation?.role || 'MEMBER',
            inviterName: invitation?.inviterName || 'Unknown User',
            inviterEmail: invitation?.inviterEmail || 'unknown@email.com',
            createdAt: invitation?.createdAt || new Date().toISOString(),
            status: invitation?.status || 'PENDING',
            ...invitation
          }
          
          // Ch·ªâ hi·ªÉn th·ªã action buttons n·∫øu status l√† PENDING
          const actionButtons = safeInvitation.status === 'PENDING' ? `
            <div class="invitation-actions mt-3">
              <button class="btn btn-success me-2" onclick="handleAcceptInvitation('${safeInvitation.id}')">‚úÖ Ch·∫•p nh·∫≠n</button>
              <button class="btn btn-outline-danger" onclick="handleDeclineInvitation('${safeInvitation.id}')">‚ùå T·ª´ ch·ªëi</button>
            </div>
          ` : `
            <div class="invitation-status mt-3">
              <span class="badge bg-secondary">Tr·∫°ng th√°i: ${safeInvitation.status}</span>
            </div>
          `
          
          return {
            id: `invitation_${safeInvitation.id}`,
            sender: safeInvitation.inviterName,
            email: safeInvitation.inviterEmail,
            subject: `L·ªùi m·ªùi tham gia workspace: ${safeInvitation.workspaceName}`,
            preview: `B·∫°n ƒë∆∞·ª£c m·ªùi tham gia workspace "${safeInvitation.workspaceName}" v·ªõi vai tr√≤ ${safeInvitation.role}. ${safeInvitation.status === 'PENDING' ? 'H√£y ch·∫•p nh·∫≠n ƒë·ªÉ b·∫Øt ƒë·∫ßu c·ªông t√°c!' : `Tr·∫°ng th√°i: ${safeInvitation.status}`}`,
            content: `
              <div class="workspace-invitation-card">
                <h5>üè¢ L·ªùi m·ªùi tham gia Workspace</h5>
                <p><strong>Workspace:</strong> ${safeInvitation.workspaceName}</p>
                <p><strong>M√¥ t·∫£:</strong> ${safeInvitation.workspaceDescription}</p>
                <p><strong>Vai tr√≤:</strong> <span class="badge bg-primary">${safeInvitation.role}</span></p>
                <p><strong>Ng∆∞·ªùi m·ªùi:</strong> ${safeInvitation.inviterName}</p>
                <p><strong>Email ng∆∞·ªùi m·ªùi:</strong> ${safeInvitation.inviterEmail}</p>
                ${actionButtons}
              </div>
            `,
            time: new Date(safeInvitation.createdAt).toLocaleDateString('vi-VN'),
            isRead: safeInvitation.status !== 'PENDING', // ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc n·∫øu kh√¥ng c√≤n pending
            isStarred: false,
            hasAttachment: false,
            priority: 'normal',
            category: 'invitations',
            invitationType: 'workspace',
            invitationData: safeInvitation
          }
        })
        return invitationMails
      } else {
        // Kh√¥ng c√≥ invitation n√†o, tr·∫£ v·ªÅ m·∫£ng r·ªóng (kh√¥ng hi·ªÉn th·ªã mockdata)
        return []
      }
    }
    
    // Cho c√°c category kh√°c, tr·∫£ v·ªÅ mockMails
    return mockMails
  }

  const filteredMails = getAllMails().filter(mail => {
    const matchesCategory = mail.category === selectedCategory
    const matchesSearch = !searchKeyword || 
      mail.subject.toLowerCase().includes(searchKeyword.toLowerCase()) ||
      mail.sender.toLowerCase().includes(searchKeyword.toLowerCase()) ||
      mail.preview.toLowerCase().includes(searchKeyword.toLowerCase())
    return matchesCategory && matchesSearch
  })

  const formatTime = (timeString) => {
    return timeString
  }

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return 'text-danger'
      case 'normal': return 'text-primary'
      case 'low': return 'text-success'
      default: return 'text-muted'
    }
  }

  const getPriorityIcon = (priority) => {
    switch (priority) {
      case 'high': return 'bi-exclamation-triangle-fill'
      case 'normal': return 'bi-info-circle-fill'
      case 'low': return 'bi-check-circle-fill'
      default: return 'bi-circle'
    }
  }

  const handleCompose = () => {
    setShowCompose(true)
    setSelectedMail(null)
  }

  const handleSendMail = () => {
    // Logic g·ª≠i mail s·∫Ω ƒë∆∞·ª£c implement sau
    console.log('Sending mail:', composeData)
    alert('Mail ƒë√£ ƒë∆∞·ª£c g·ª≠i!')
    setShowCompose(false)
    setComposeData({ to: '', subject: '', content: '' })
  }

  const handleMarkAsRead = (mailId) => {
    // Logic ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc
    console.log('Mark as read:', mailId)
  }

  const handleStarToggle = (mailId) => {
    // Logic toggle star
    console.log('Toggle star:', mailId)
  }

  const handleDelete = (mailId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a email n√†y?')) {
      console.log('Delete mail:', mailId)
    }
  }

  return (
    <div className="mail-container">
      {/* Sidebar */}
      <div className="mail-sidebar">
        <div className="mail-sidebar-header">
          <button 
            className="btn btn-primary w-100 mb-3"
            onClick={handleCompose}
          >
            <i className="bi bi-plus-lg me-2"></i>
            So·∫°n th∆∞
          </button>
        </div>
        
        <div className="mail-categories">
          {getMailCategories().map(category => (
            <button
              key={category.id}
              className={`mail-category-item ${selectedCategory === category.id ? 'active' : ''}`}
              onClick={() => setSelectedCategory(category.id)}
              data-category={category.id}
            >
              <div className="d-flex align-items-center">
                <i className={`bi ${category.icon} me-3`}></i>
                <span className="flex-grow-1">{category.name}</span>
                {category.count > 0 && (
                  <span className="badge bg-secondary">{category.count}</span>
                )}
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* Main Content */}
      <div className="mail-main">
        {/* Toolbar */}
        <div className="mail-toolbar">
          <div className="d-flex align-items-center justify-content-between">
            <div className="d-flex align-items-center">
              <h4 className="mb-0 me-4">
                {getMailCategories().find(cat => cat.id === selectedCategory)?.name}
              </h4>
              <div className="mail-search">
                <div className="input-group">
                  <span className="input-group-text">
                    <i className="bi bi-search"></i>
                  </span>
                  <input
                    type="text"
                    className="form-control"
                    placeholder="T√¨m ki·∫øm email..."
                    value={searchKeyword}
                    onChange={(e) => setSearchKeyword(e.target.value)}
                  />
                </div>
              </div>
            </div>
            
            <div className="mail-actions">
              <button className="btn btn-outline-secondary btn-sm me-2">
                <i className="bi bi-arrow-clockwise"></i>
              </button>
              <button className="btn btn-outline-secondary btn-sm me-2">
                <i className="bi bi-gear"></i>
              </button>
              <div className="dropdown">
                <button 
                  className="btn btn-outline-secondary btn-sm dropdown-toggle" 
                  data-bs-toggle="dropdown"
                >
                  <i className="bi bi-three-dots"></i>
                </button>
                <ul className="dropdown-menu">
                  <li><a className="dropdown-item" href="#"><i className="bi bi-check-all me-2"></i>ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc</a></li>
                  <li><a className="dropdown-item" href="#"><i className="bi bi-star me-2"></i>G·∫Øn sao t·∫•t c·∫£</a></li>
                  <li><hr className="dropdown-divider" /></li>
                  <li><a className="dropdown-item text-danger" href="#"><i className="bi bi-trash me-2"></i>X√≥a t·∫•t c·∫£</a></li>
                </ul>
              </div>
            </div>
          </div>
        </div>

        {/* Content Area */}
        <div className="mail-content">
          {!showCompose && !selectedMail && (
            <div className="row h-100">
              {/* Email List */}
              <div className="col-md-4 mail-list">
                {loadingInvitations && selectedCategory === 'invitations' ? (
                  <div className="text-center py-5">
                    <div className="spinner-border text-primary" role="status">
                      <span className="visually-hidden">ƒêang t·∫£i...</span>
                    </div>
                    <p className="text-muted mt-3">ƒêang t·∫£i l·ªùi m·ªùi workspace...</p>
                  </div>
                ) : invitationError && selectedCategory === 'invitations' ? (
                  <div className="text-center py-5">
                    <i className="bi bi-exclamation-triangle fs-1 text-warning"></i>
                    <p className="text-danger mt-3">{invitationError}</p>
                    <button 
                      className="btn btn-outline-primary btn-sm"
                      onClick={loadWorkspaceInvitations}
                    >
                      <i className="bi bi-arrow-clockwise me-1"></i>
                      Th·ª≠ l·∫°i
                    </button>
                  </div>
                ) : filteredMails.length === 0 ? (
                  <div className="text-center py-5">
                    <i className={`bi ${selectedCategory === 'invitations' ? 'bi-people-fill' : 'bi-inbox'} fs-1 text-muted`}></i>
                    <p className="text-muted mt-3">
                      {selectedCategory === 'invitations' 
                        ? 'Kh√¥ng c√≥ l·ªùi m·ªùi workspace n√†o'
                        : 'Kh√¥ng c√≥ email n√†o'
                      }
                    </p>
                    {selectedCategory === 'invitations' && (
                      <small className="text-muted">
                        Khi c√≥ l·ªùi m·ªùi tham gia workspace m·ªõi, ch√∫ng s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y.
                      </small>
                    )}
                  </div>
                ) : (
                  filteredMails.map(mail => (
                    <div 
                      key={mail.id}
                      className={`mail-item ${!mail.isRead ? 'unread' : ''} ${selectedMail?.id === mail.id ? 'selected' : ''} ${mail.invitationType ? 'invitation-mail' : ''}`}
                      onClick={() => setSelectedMail(mail)}
                      data-category={mail.category}
                    >
                      <div className="mail-item-header">
                        <div className="d-flex align-items-center">
                          <button 
                            className={`btn btn-sm btn-link p-0 me-2 ${mail.isStarred ? 'text-warning' : 'text-muted'}`}
                            onClick={(e) => {
                              e.stopPropagation()
                              handleStarToggle(mail.id)
                            }}
                          >
                            <i className={`bi ${mail.isStarred ? 'bi-star-fill' : 'bi-star'}`}></i>
                          </button>
                          <span className="mail-sender">{mail.sender}</span>
                          {mail.invitationType === 'workspace' && (
                            <span className="badge bg-success ms-2">
                              <i className="bi bi-people me-1"></i>L·ªùi m·ªùi
                            </span>
                          )}
                          <div className="ms-auto d-flex align-items-center">
                            {mail.hasAttachment && (
                              <i className="bi bi-paperclip text-muted me-1"></i>
                            )}
                            <i className={`bi ${getPriorityIcon(mail.priority)} ${getPriorityColor(mail.priority)} me-2`}></i>
                            <small className="text-muted">{mail.time}</small>
                          </div>
                        </div>
                      </div>
                      <div className="mail-subject">{mail.subject}</div>
                      <div className="mail-preview">{mail.preview}</div>
                    </div>
                  ))
                )}
              </div>

              {/* Email Detail Placeholder */}
              <div className="col-md-8 mail-detail">
                <div className="text-center py-5">
                  <i className="bi bi-envelope-open fs-1 text-muted"></i>
                  <p className="text-muted mt-3">Ch·ªçn m·ªôt email ƒë·ªÉ xem chi ti·∫øt</p>
                </div>
              </div>
            </div>
          )}

          {/* Email Detail */}
          {selectedMail && !showCompose && (
            <div className="mail-detail-view">
              <div className="mail-detail-header">
                <div className="d-flex align-items-center justify-content-between mb-3">
                  <button 
                    className="btn btn-outline-secondary btn-sm"
                    onClick={() => setSelectedMail(null)}
                  >
                    <i className="bi bi-arrow-left me-1"></i>
                    Quay l·∫°i
                  </button>
                  <div className="mail-detail-actions">
                    <button 
                      className="btn btn-outline-secondary btn-sm me-2"
                      onClick={() => handleMarkAsRead(selectedMail.id)}
                    >
                      <i className="bi bi-envelope-open"></i>
                    </button>
                    <button 
                      className={`btn btn-sm me-2 ${selectedMail.isStarred ? 'btn-warning' : 'btn-outline-warning'}`}
                      onClick={() => handleStarToggle(selectedMail.id)}
                    >
                      <i className={`bi ${selectedMail.isStarred ? 'bi-star-fill' : 'bi-star'}`}></i>
                    </button>
                    <button className="btn btn-outline-primary btn-sm me-2">
                      <i className="bi bi-reply"></i>
                    </button>
                    <button className="btn btn-outline-primary btn-sm me-2">
                      <i className="bi bi-reply-all"></i>
                    </button>
                    <button className="btn btn-outline-primary btn-sm me-2">
                      <i className="bi bi-forward"></i>
                    </button>
                    <button 
                      className="btn btn-outline-danger btn-sm"
                      onClick={() => handleDelete(selectedMail.id)}
                    >
                      <i className="bi bi-trash"></i>
                    </button>
                  </div>
                </div>
                
                <h3 className="mail-detail-subject">{selectedMail.subject}</h3>
                
                <div className="mail-detail-meta">
                  <div className="d-flex align-items-center">
                    <div className="mail-sender-avatar me-3">
                      <i className="bi bi-person-circle fs-3"></i>
                    </div>
                    <div className="flex-grow-1">
                      <div className="fw-bold">{selectedMail.sender}</div>
                      <div className="text-muted small">{selectedMail.email}</div>
                    </div>
                    <div className="text-muted small">
                      <i className={`bi ${getPriorityIcon(selectedMail.priority)} ${getPriorityColor(selectedMail.priority)} me-1`}></i>
                      {selectedMail.time}
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mail-detail-content">
                {selectedMail.invitationType === 'workspace' ? (
                  <div className="workspace-invitation-content">
                    <div dangerouslySetInnerHTML={{ __html: selectedMail.content }} />
                    
                    {/* Interactive buttons that work with React - ch·ªâ hi·ªán khi status = PENDING */}
                    {selectedMail.invitationData?.status === 'PENDING' ? (
                      <div className="workspace-invitation-actions mt-4 p-3 bg-light rounded">
                        <h6>Thao t√°c:</h6>
                        <div className="d-flex gap-2">
                          <button 
                            className="btn btn-success"
                            onClick={() => handleAcceptInvitation(selectedMail.invitationData?.id || selectedMail.id)}
                          >
                            <i className="bi bi-check-lg me-2"></i>
                            Ch·∫•p nh·∫≠n l·ªùi m·ªùi
                          </button>
                          <button 
                            className="btn btn-outline-danger"
                            onClick={() => handleDeclineInvitation(selectedMail.invitationData?.id || selectedMail.id)}
                          >
                            <i className="bi bi-x-lg me-2"></i>
                            T·ª´ ch·ªëi
                          </button>
                          <button 
                            className="btn btn-outline-secondary"
                            onClick={() => alert('T√≠nh nƒÉng xem th√¥ng tin workspace chi ti·∫øt s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn sau!')}
                          >
                            <i className="bi bi-info-circle me-2"></i>
                            Xem chi ti·∫øt
                          </button>
                        </div>
                      </div>
                    ) : (
                      <div className="workspace-invitation-status mt-4 p-3 bg-secondary rounded">
                        <h6 className="text-white">Tr·∫°ng th√°i l·ªùi m·ªùi:</h6>
                        <span className={`badge ${
                          selectedMail.invitationData?.status === 'ACCEPTED' ? 'bg-success' :
                          selectedMail.invitationData?.status === 'DECLINED' ? 'bg-danger' :
                          'bg-warning'
                        } fs-6`}>
                          {selectedMail.invitationData?.status === 'ACCEPTED' ? '‚úÖ ƒê√£ ch·∫•p nh·∫≠n' :
                           selectedMail.invitationData?.status === 'DECLINED' ? '‚ùå ƒê√£ t·ª´ ch·ªëi' :
                           selectedMail.invitationData?.status === 'EXPIRED' ? '‚è∞ ƒê√£ h·∫øt h·∫°n' :
                           `üìã ${selectedMail.invitationData?.status}`
                          }
                        </span>
                      </div>
                    )}
                  </div>
                ) : (
                  <div dangerouslySetInnerHTML={{ __html: selectedMail.content }} />
                )}
              </div>
              
              {selectedMail.hasAttachment && (
                <div className="mail-attachments mt-4">
                  <h6><i className="bi bi-paperclip me-2"></i>File ƒë√≠nh k√®m</h6>
                  <div className="attachment-list">
                    <div className="attachment-item">
                      <i className="bi bi-file-earmark-pdf text-danger me-2"></i>
                      <span>B√°o_c√°o_d·ª±_√°n_Q4.pdf</span>
                      <small className="text-muted ms-2">(2.5 MB)</small>
                      <button className="btn btn-sm btn-outline-primary ms-2">
                        <i className="bi bi-download"></i>
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Compose Mail */}
          {showCompose && (
            <div className="mail-compose">
              <div className="mail-compose-header">
                <h4>So·∫°n th∆∞ m·ªõi</h4>
                <button 
                  className="btn btn-outline-secondary btn-sm"
                  onClick={() => setShowCompose(false)}
                >
                  <i className="bi bi-x-lg"></i>
                </button>
              </div>
              
              <div className="mail-compose-form">
                <div className="mb-3">
                  <label className="form-label">ƒê·∫øn:</label>
                  <input
                    type="email"
                    className="form-control"
                    placeholder="Nh·∫≠p email ng∆∞·ªùi nh·∫≠n..."
                    value={composeData.to}
                    onChange={(e) => setComposeData({...composeData, to: e.target.value})}
                  />
                </div>
                
                <div className="mb-3">
                  <label className="form-label">Ti√™u ƒë·ªÅ:</label>
                  <input
                    type="text"
                    className="form-control"
                    placeholder="Nh·∫≠p ti√™u ƒë·ªÅ email..."
                    value={composeData.subject}
                    onChange={(e) => setComposeData({...composeData, subject: e.target.value})}
                  />
                </div>
                
                <div className="mb-3">
                  <label className="form-label">N·ªôi dung:</label>
                  <textarea
                    className="form-control"
                    rows={12}
                    placeholder="Nh·∫≠p n·ªôi dung email..."
                    value={composeData.content}
                    onChange={(e) => setComposeData({...composeData, content: e.target.value})}
                  />
                </div>
                
                <div className="mail-compose-actions">
                  <button 
                    className="btn btn-primary me-2"
                    onClick={handleSendMail}
                  >
                    <i className="bi bi-send me-1"></i>
                    G·ª≠i
                  </button>
                  <button className="btn btn-outline-secondary me-2">
                    <i className="bi bi-save me-1"></i>
                    L∆∞u nh√°p
                  </button>
                  <button className="btn btn-outline-secondary">
                    <i className="bi bi-paperclip me-1"></i>
                    ƒê√≠nh k√®m
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default Mail
