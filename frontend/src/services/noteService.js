import { API_CONFIG } from '../config/oauth'

// Note API Service
const noteService = {
  // Táº¡o note má»›i
  createNote: async (noteData) => {
    try {
      const token = localStorage.getItem('workify_access_token')
      console.log('ðŸ”‘ Creating note with token:', token ? 'Token exists' : 'No token')
      
      const response = await fetch(`${API_CONFIG.baseUrl}/notes`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(noteData)
      })

      console.log('ðŸ“¤ Create note response status:', response.status)
      const data = await response.json()
      console.log('ðŸ“¤ Create note response data:', data)
      
      if (!response.ok) {
        throw new Error(data.message || 'Lá»—i khi táº¡o ghi chÃº')
      }

      return data
    } catch (error) {
      console.error('Error creating note:', error)
      throw error
    }
  },

  // Láº¥y táº¥t cáº£ notes
  getAllNotes: async () => {
    try {
      const token = localStorage.getItem('workify_access_token')
      console.log('ðŸ”‘ Getting notes with token:', token ? 'Token exists' : 'No token')
      console.log('ðŸ”— API URL:', `${API_CONFIG.baseUrl}/notes`)
      
      const response = await fetch(`${API_CONFIG.baseUrl}/notes`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      console.log('ðŸ“¥ Get notes response status:', response.status)
      const data = await response.json()
      console.log('ðŸ“¥ Get notes response data:', data)
      
      if (!response.ok) {
        throw new Error(data.message || 'Lá»—i khi láº¥y danh sÃ¡ch ghi chÃº')
      }

      return data
    } catch (error) {
      console.error('Error fetching notes:', error)
      throw error
    }
  },

  // Láº¥y note theo ID
  getNoteById: async (noteId) => {
    try {
      const token = localStorage.getItem('workify_access_token')
      const response = await fetch(`${API_CONFIG.baseUrl}/notes/${noteId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.message || 'Lá»—i khi láº¥y ghi chÃº')
      }

      return data
    } catch (error) {
      console.error('Error fetching note:', error)
      throw error
    }
  },

  // Cáº­p nháº­t note
  updateNote: async (noteId, noteData) => {
    try {
      const token = localStorage.getItem('workify_access_token')
      const response = await fetch(`${API_CONFIG.baseUrl}/notes/${noteId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(noteData)
      })

      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.message || 'Lá»—i khi cáº­p nháº­t ghi chÃº')
      }

      return data
    } catch (error) {
      console.error('Error updating note:', error)
      throw error
    }
  },

  // XÃ³a note
  deleteNote: async (noteId) => {
    try {
      const token = localStorage.getItem('workify_access_token')
      const response = await fetch(`${API_CONFIG.baseUrl}/notes/${noteId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.message || 'Lá»—i khi xÃ³a ghi chÃº')
      }

      return data
    } catch (error) {
      console.error('Error deleting note:', error)
      throw error
    }
  },

  // TÃ¬m kiáº¿m notes
  searchNotes: async (keyword) => {
    try {
      const token = localStorage.getItem('workify_access_token')
      const response = await fetch(`${API_CONFIG.baseUrl}/notes/search?keyword=${encodeURIComponent(keyword)}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.message || 'Lá»—i khi tÃ¬m kiáº¿m ghi chÃº')
      }

      return data
    } catch (error) {
      console.error('Error searching notes:', error)
      throw error
    }
  },

  // Láº¥y thá»‘ng kÃª notes
  getNoteStats: async () => {
    try {
      const token = localStorage.getItem('workify_access_token')
      const response = await fetch(`${API_CONFIG.baseUrl}/notes/stats`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.message || 'Lá»—i khi láº¥y thá»‘ng kÃª')
      }

      return data
    } catch (error) {
      console.error('Error fetching note stats:', error)
      throw error
    }
  }
}

export default noteService
